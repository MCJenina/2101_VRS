package vrs;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.util.HashMap;
import java.util.Map;
import java.sql.ResultSet;
import javax.swing.JOptionPane;

public class FillUpForm extends javax.swing.JFrame {
    private Connection connection; //Creates new form FillUpForm    
    public FillUpForm() {
        initComponents();
        connectDatabase();
        loadAvailableCars();  // Default load for customer (can be replaced with a specific method call for admin)
    }

    // Database connection
    private void connectDatabase() {
        try {
            String url = "jdbc:mysql://localhost:3306/vehiclerentalsystem?useSSL=false&serverTimezone=UTC";
            String user = "Jenina"; // Update with your username
            String password = "qwertyuiop"; // Update with your password
            connection = DriverManager.getConnection(url, user, password);
            System.out.println("Connected to database successfully!");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Failed to connect to database: " + e.getMessage());
        }
    }

    // Load available cars for customers (you can replace this with admin-specific load method)
    private void loadAvailableCars() {
        String query = "SELECT car_id, Model, Type, Status, Price FROM cars WHERE Status = 'Available'";
        populateTable(query, false);  
        }
    
    // Populate table with query results
    private void populateTable(String query, boolean isBooking) {
        try (PreparedStatement pstmt = connection.prepareStatement(query);
             ResultSet rs = pstmt.executeQuery()) {

            DefaultTableModel model = new DefaultTableModel();
            if (isBooking) {
                model.addColumn("Booking ID");
                model.addColumn("Customer Name");
                model.addColumn("Car Model");
                model.addColumn("Booking Date");
            } else {
                model.addColumn("Car ID");
                model.addColumn("Model");
                model.addColumn("Type");
                model.addColumn("Status");
                model.addColumn("Price");
            }

            while (rs.next()) {
                Object[] row = new Object[model.getColumnCount()];
                if (isBooking) {
                    row[0] = rs.getInt("booking_id");
                    row[1] = rs.getString("customer_name");
                    row[2] = rs.getString("car_model");
                    row[3] = rs.getDate("booking_date");
                } else {
                    row[0] = rs.getInt("car_id");
                    row[1] = rs.getString("Model");
                    row[2] = rs.getString("Type");
                    row[3] = rs.getString("Status");
                    row[4] = rs.getDouble("Price");
                }
                model.addRow(row);
            }

            Bookingtable.setModel(model); // Assumes `Bookingtable` is a JTable

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
        }
    }
    // Booking button event (for customer booking)

   

    
    // Placeholder for the current user's ID (replace with actual session data)
    private String getCurrentUserId() {
        return "1"; 
    }
    
    // Code to refresh available cars or update booking-related components in the booking GUI
    private void refreshBookingSection() {
        loadAvailableCars(); 

    }

     //This method is called from within the constructor to initialize the form.
     //WARNING: Do NOT modify this code. The content of this method is always
     //regenerated by the Form Editor.
     
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        PickUpDate = new com.toedter.calendar.JDateChooser();
        ReturnDate = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Places = new javax.swing.JComboBox<>();
        Destination = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        Cash = new javax.swing.JRadioButton();
        Gcash = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        Additionalfee = new javax.swing.JTextField();
        SubmitButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        ListofCars = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        Viewbutton = new javax.swing.JButton();
        PrintButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Bookingtable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Pick Up Date");

        jLabel2.setText("Return Date");

        jLabel3.setText("Places");

        jLabel4.setText("Destination");

        Places.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nasugbu Batangas", "Calatagan Batangas", "Calaca, Batangas", "Lemery, Batangas" }));
        Places.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlacesActionPerformed(evt);
            }
        });

        jLabel5.setText("Payment Method");

        buttonGroup1.add(Cash);
        Cash.setText("Cash");

        buttonGroup1.add(Gcash);
        Gcash.setText("Gcash");

        jLabel6.setText("Additional Fees:");

        Additionalfee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdditionalfeeActionPerformed(evt);
            }
        });

        SubmitButton.setText("Submit");
        SubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitButtonActionPerformed(evt);
            }
        });

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        ListofCars.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1-  Mitsubshi Montero", "2 - Toyota Altis", "3 - Suzuki XL7", "4 - Nissan Terra", "5 - Mazda CX8 ", "6 - VAN | Toyota Super Grandia", "7 - Toyota Coster", "8 - Kia Carnival", "9 - Mitsubishi L300", "10 - Ford Next Gen Everest" }));
        ListofCars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListofCarsActionPerformed(evt);
            }
        });

        jLabel8.setText("List of Cars:");

        Viewbutton.setText("View");
        Viewbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewbuttonActionPerformed(evt);
            }
        });

        PrintButton.setText("Print Receipt");
        PrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel8)
                .addGap(190, 190, 190)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(ListofCars, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(PickUpDate, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(290, 290, 290)
                .addComponent(jLabel2))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(Places, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(Destination, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Gcash)
                    .addComponent(Cash)))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel6))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(Additionalfee, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(CancelButton)
                .addGap(8, 8, 8)
                .addComponent(SubmitButton))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(PrintButton)
                .addGap(143, 143, 143)
                .addComponent(Viewbutton)
                .addGap(8, 8, 8)
                .addComponent(DeleteButton))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(BackButton))
            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ListofCars, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PickUpDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(jLabel2)
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(4, 4, 4)
                        .addComponent(Places, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jLabel5)))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(4, 4, 4)
                        .addComponent(Destination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(Gcash))
                    .addComponent(Cash))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Additionalfee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CancelButton)
                    .addComponent(SubmitButton))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PrintButton)
                    .addComponent(Viewbutton)
                    .addComponent(DeleteButton)))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(330, 330, 330)
                .addComponent(BackButton))
            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        Bookingtable.setBackground(new java.awt.Color(255, 255, 204));
        Bookingtable.setFont(Bookingtable.getFont().deriveFont((Bookingtable.getFont().getStyle() & ~java.awt.Font.ITALIC) & ~java.awt.Font.BOLD, 12));
        Bookingtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Model", "Type", "Status", "Price", "Image"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Bookingtable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PlacesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlacesActionPerformed
        // TODO add your handling code here:
        //get selected value from combobox
        String selectedValue = Places.getSelectedItem().toString();
        
        //now set this selected value into textfield
        Destination.setText(selectedValue);
    }//GEN-LAST:event_PlacesActionPerformed

    private void AdditionalfeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdditionalfeeActionPerformed
        // TODO add your handling code here: Submitt Button
        
    }//GEN-LAST:event_AdditionalfeeActionPerformed

    private void SubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitButtonActionPerformed
        // TODO add your handling code here: //Submitt Button
        String destination = Places.getSelectedItem().toString();
        Map<String, Double> destinationFees = new HashMap<>();
        destinationFees.put("Nasugbu Batangas", 0.0); // Example fee for destinations
        destinationFees.put("Calatagan Batangas", 500.0);
        destinationFees.put("Calaca, Batangas", 350.0);
        destinationFees.put("Lemery, Batangas", 450.0);

        // Calculate the additional cost based on destination
        double additionalFee = destinationFees.getOrDefault(destination, 0.0);
        double baseCost = 0.0; // Base cost for the reservation
        double additionalFees = baseCost + additionalFee;
        String car_name = ListofCars.getSelectedItem().toString();
        int car_Id = Integer.parseInt(car_name.split(" - ")[0]); // Extract car_id
        
        // Retrieve form inputs
        java.util.Date pickupDate = PickUpDate.getDate();
        java.util.Date returnDate = ReturnDate.getDate();
        String paymentMethod = Cash.isSelected() ? "Cash" : "GCash";
        String status = "Successful";
        
            // Check if car is available for the chosen dates
    if (!checkAvailabilityStatus(car_Id, pickupDate, returnDate)) {
        javax.swing.JOptionPane.showMessageDialog(this, 
            "This vehicle is already booked for the selected dates. Please choose another date or vehicle.");
        return; // Stop further processing
    }
        
        // Validate that pickup and return dates are provided
    if (PickUpDate.getDate() == null || ReturnDate.getDate() == null) {
        javax.swing.JOptionPane.showMessageDialog(this, "Pick-up and Return Dates are required.");
    } else if (ReturnDate.getDate().before(PickUpDate.getDate())) {  // Validate that the return date is not before the pickup date
        javax.swing.JOptionPane.showMessageDialog(this, "Return Date/Time cannot be before Pick-up Date/Time.");
    } else if  (!Cash.isSelected() && !Gcash.isSelected()) {
        javax.swing.JOptionPane.showMessageDialog(this, "Please select a payment method.");
        return;
    } else if(Places.getSelectedIndex() == -1){
    // Validate that an item is selected in the combo box
    javax.swing.JOptionPane.showMessageDialog(this, "Please select an item from the list.");
    }  else {
        Additionalfee.setText("₱" + additionalFees);
        Additionalfee.setText("₱" + additionalFees);
        javax.swing.JOptionPane.showMessageDialog(this, "Total cost for " + destination + " is ₱" + additionalFees);
        javax.swing.JOptionPane.showMessageDialog(this, "Booking Success!");
    }
    // FillUpFromClass form = new FillUpFromClass(jDateChooser1, jDateChooser2, destination, paymentMethod, additionalFees, status, car_Id, car_name);   
        

        // Database connection details
        String url = "jdbc:mysql://localhost:3306/vehiclerentalsystem"; // Replace with your database name
        String username = "Jenina"; // Default for XAMPP
        String password = "qwertyuiop"; // Default for XAMPP (empty)

        
        
    // SQL Insert Query
    String sql = "INSERT INTO reservations (pickup_date, return_date, destination, payment_method, additionalFees, availability_status, car_id, car_name) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
    
    try (Connection conn = DriverManager.getConnection(url, username, password);
         PreparedStatement stmt = conn.prepareStatement(sql)) {
       
        
        // Save to database
        stmt.setTimestamp(1, new java.sql.Timestamp(pickupDate.getTime()));
        stmt.setTimestamp(2, new java.sql.Timestamp(returnDate.getTime()));
        stmt.setString(3, destination);
        stmt.setString(4, paymentMethod);
        stmt.setDouble(5, additionalFees);
        stmt.setString(6, status);
        stmt.setInt(7, car_Id); // Add car_id
        stmt.setString(8, car_name);

        stmt.executeUpdate();
        
        //Add data to JTable
        DefaultTableModel model = (DefaultTableModel) Bookingtable.getModel();
        model.addRow(new Object[]{
            pickupDate,
            returnDate,
            destination,
            paymentMethod,
            additionalFees,
            status,
            car_Id,
            car_name
        });

        // Confirmation message
        javax.swing.JOptionPane.showMessageDialog(this, "Reservation successfully submitted!");
    } catch (SQLException ex) {
        javax.swing.JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage());
        ex.printStackTrace();
    } catch (NumberFormatException ex) {
        javax.swing.JOptionPane.showMessageDialog(this, "Invalid total cost format. Please check your inputs.");
    }
}
    private boolean checkAvailabilityStatus(int car_Id, java.util.Date pickupDate, java.util.Date returnDate) {
    String url = "jdbc:mysql://localhost:3306/vehiclerentalsystemnew"; // Update database connection details
    String username = "admin";
    String password = "admin123";

    String query = "SELECT * FROM reservations WHERE car_id = ? AND " +
                   "((pickup_date <= ? AND return_date >= ?) OR " +
                   "(pickup_date <= ? AND return_date >= ?))";

    try (Connection conn = DriverManager.getConnection(url, username, password);
         PreparedStatement stmt = conn.prepareStatement(query)) {

        stmt.setInt(1, car_Id);
        stmt.setTimestamp(2, new java.sql.Timestamp(returnDate.getTime()));
        stmt.setTimestamp(3, new java.sql.Timestamp(pickupDate.getTime()));
        stmt.setTimestamp(4, new java.sql.Timestamp(returnDate.getTime()));
        stmt.setTimestamp(5, new java.sql.Timestamp(pickupDate.getTime()));

        ResultSet rs = stmt.executeQuery();

        return !rs.next(); // If no conflicts, car is available

    } catch (SQLException ex) {
        javax.swing.JOptionPane.showMessageDialog(this, "Error checking availability: " + ex.getMessage());
        ex.printStackTrace();
        return false; // Default to unavailable in case of error
    }
    
        
    }//GEN-LAST:event_SubmitButtonActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        // TODO add your handling code here:Cancel Button
        // Reset all form fields
        PickUpDate.setDate(null);
        ReturnDate.setDate(null);
        Places.setSelectedIndex(0); // Reset to default item
        Cash.setSelected(false); // Unselect radio buttons
        Gcash.setSelected(false);
        Destination.setText(""); // Clear the text field
        Additionalfee.setText(""); // Optionally, clear another text field if applicable
    
    // Optionally, you can display a message to confirm the reset
    javax.swing.JOptionPane.showMessageDialog(this, "Form has been cleared.");
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void ListofCarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListofCarsActionPerformed
        // TODO add your handling code here:
    String url = "jdbc:mysql://localhost:3306/vehiclerentalsystem";
    String username = "Jenina";
    String password = "qwertyuiop";
    
    

    String query = "SELECT car_id, car_name FROM reservations WHERE availability_status = 'Available'";

    try (Connection conn = DriverManager.getConnection(url, username, password);
         var stmt = conn.createStatement();
         var rs = stmt.executeQuery(query)) {

        while (rs.next()) {
            int car_Id = rs.getInt("car_id");
            String car_name = rs.getString("car_name");
            ListofCars.addItem(car_Id + " - " + car_name); // Add car_id and name to dropdown
        }

    } catch (SQLException ex) {
        javax.swing.JOptionPane.showMessageDialog(this, "Error loading car data: " + ex.getMessage());
        ex.printStackTrace();
    }


    }//GEN-LAST:event_ListofCarsActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        // TODO add your handling code here:
        Vehicles toVehicles = new Vehicles();
        toVehicles.show();
        
        dispose();
                
    }//GEN-LAST:event_BackButtonActionPerformed
private void readRecords() {
        try {
            String query = "SELECT * FROM cars"; // Adjust query based on your database schema
            Statement stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            DefaultTableModel model = (DefaultTableModel) Bookingtable.getModel();
            model.setRowCount(0); // Clear existing rows in the table

            while (rs.next()) {
                Object[] row = {
                    rs.getInt("car_id"),     // Replace with actual column names from your database
                    rs.getString("car_name"),
                    rs.getString("car_type"),
                    
                };
                model.addRow(row);               
            }
        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Error loading records: " + e.getMessage());
        }
    }
    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        // TODO add your handling code here:
        //delete button
        
        
        int selectedColumn = Bookingtable.getSelectedRow();
        if (selectedColumn == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a reservation to delete.");
            return;
        }

        Object carIdObject = Bookingtable.getValueAt(selectedColumn, 7); // Assuming Car ID is in column 7
        if (carIdObject == null || carIdObject.toString().trim().isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Car ID is empty or invalid.");
            return;
        }

        String carIdString = carIdObject.toString().trim();
        int car_Id;
        try {
            car_Id = Integer.parseInt(carIdString);
        } catch (NumberFormatException ex) {
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid Car ID format in the table.");
            return;
        }

        try {
            String deleteQuery = "DELETE FROM cars WHERE car_id = ?";
            PreparedStatement stmt = connection.prepareStatement(deleteQuery);
            stmt.setInt(1, car_Id);
            int rowsAffected = stmt.executeUpdate();

            if (rowsAffected > 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "Record deleted successfully.");
                readRecords();
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "No matching record found to delete.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Error while deleting record: " + e.getMessage());
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void ViewbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewbuttonActionPerformed
        // TODO add your handling code here:
         // Database connection details
    String url = "jdbc:mysql://localhost:3306/vehiclerentalsystem"; // Replace with your DB name
    String username = "Jenina"; // Replace with your username
    String password = "qwertyuiop"; // Replace with your password

    // Query to fetch reservation data
    String query = "SELECT pickup_date, return_date, destination, payment_method, additionalFees, availability_status, car_id, car_name FROM reservations";

    try (Connection conn = DriverManager.getConnection(url, username, password);
         PreparedStatement stmt = conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery()) {

        // Get the table model
        DefaultTableModel model = (DefaultTableModel) Bookingtable.getModel();

        // Clear existing rows
        model.setRowCount(0);

        // Add rows to the JTable from the ResultSet
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getTimestamp("pickup_date"),
                rs.getTimestamp("return_date"),
                rs.getString("destination"),
                rs.getString("payment_method"),
                rs.getDouble("additionalFees"),
                rs.getString("availability_status"),
                rs.getInt("car_id"),
                rs.getString("car_name")
            });
        }

        javax.swing.JOptionPane.showMessageDialog(this, "Data loaded successfully!");

    } catch (SQLException ex) {
        javax.swing.JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage());
        ex.printStackTrace();
    }
    }//GEN-LAST:event_ViewbuttonActionPerformed

    private void PrintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintButtonActionPerformed
        // TODO add your handling code here:
        // Create a string representing the receipt
    String receipt = "------------------ Payment Receipt ------------------\n"
                   + "Car Id/Name: " + ListofCars.getSelectedItem().toString() + "\n"
                   + "Destination: " + Places.getSelectedItem() + "\n"
                   + "Pick-Up Date: " + PickUpDate.getDate() + "\n"
                   + "Return Date: " + ReturnDate.getDate() + "\n"
                   + "----------------------------------------------------";

    // Use the Java Print API
    try {
        boolean complete = new javax.swing.JTextArea(receipt).print();
        if (complete) {
            javax.swing.JOptionPane.showMessageDialog(this, "Receipt printed successfully.");
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Printing was canceled.");
        }
    } catch (java.awt.print.PrinterException ex) {
        javax.swing.JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
    }//GEN-LAST:event_PrintButtonActionPerformed

    
     // @param args the command line arguments
     
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FillUpForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FillUpForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FillUpForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FillUpForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        // Create and display the form 
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FillUpForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Additionalfee;
    private javax.swing.JButton BackButton;
    private javax.swing.JTable Bookingtable;
    private javax.swing.JButton CancelButton;
    private javax.swing.JRadioButton Cash;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JTextField Destination;
    private javax.swing.JRadioButton Gcash;
    private javax.swing.JComboBox<String> ListofCars;
    private com.toedter.calendar.JDateChooser PickUpDate;
    private javax.swing.JComboBox<String> Places;
    private javax.swing.JButton PrintButton;
    private com.toedter.calendar.JDateChooser ReturnDate;
    private javax.swing.JButton SubmitButton;
    private javax.swing.JButton Viewbutton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
